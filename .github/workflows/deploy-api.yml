name: Deploy API Lambda

on:
  push:
    branches: [ main ]
    paths:
      - '**'
  pull_request:
    branches: [ main ]
    paths:
      - '**'

env:
  AWS_REGION: eu-north-1

jobs:
  deploy:
    name: Deploy Lambda Container
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get configuration from AWS
      run: |
        # Get ECR repository name from AWS
        ECR_REPO=$(aws ecr describe-repositories --query 'repositories[?repositoryName==`clofresva-skalbara-upg02-api`].repositoryName' --output text)
        if [ -z "$ECR_REPO" ]; then
          echo "ECR repository not found, using default name"
          ECR_REPO="clofresva-skalbara-upg02-api"
        fi

        # Get Lambda function name from AWS
        LAMBDA_NAME=$(aws lambda list-functions --query 'Functions[?FunctionName==`clofresva-skalbara-upg02-api-lambda`].FunctionName' --output text)
        if [ -z "$LAMBDA_NAME" ]; then
          echo "Lambda function not found, using default name"
          LAMBDA_NAME="clofresva-skalbara-upg02-api-lambda"
        fi

        # Export to environment for subsequent steps
        echo "ECR_REPOSITORY=$ECR_REPO" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION_NAME=$LAMBDA_NAME" >> $GITHUB_ENV
        echo "Using ECR repository: $ECR_REPO"
        echo "Using Lambda function: $LAMBDA_NAME"

    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Restore dependencies
      run: dotnet restore ApiLambda.csproj

    - name: Build and publish
      run: |
        cd API
        dotnet publish -c Release -r linux-x64 --self-contained

    - name: Build Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd API
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

    - name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update Lambda function
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Wait for Lambda update to complete
      run: |
        aws lambda wait function-updated \
          --function-name $LAMBDA_FUNCTION_NAME